import tkinter as tk
from tkinter import ttk
from tkinter import messagebox



def on_proceed():
    response=messagebox.askquestion("Question","Do you want to know any querys?")
    if response==yes:

        user_label.config(text="You chose to proceed")
    else:
        user_label.config(text="You didn't chose to proceed")



# def calculate():
#     try:
#         quantity = float(quantity_text.get())
#         price = float(price_text.get())
#         if quantity < 0 or price < 0:
#             raise ValueError
#         total = quantity * price
#         total_text.delete(0, tk.END)
#         total_text.insert(0, total)
#     except ValueError:
#         messagebox.showerror("Input Error", "Please enter non-negative numbers for Quantity and Price and empty")



def calculate():
    try:

        quantity = float(quantity_text.get())
        price = float(price_text.get())
        total = quantity * price
        total_text.delete(0, tk.END)
        total_text.insert(0, total)
    #     if quantity<0 or price<0:
    #         raise ValueError
    # except ValueError:
    #     messagebox.showeeror("Error",'Value shold not be negative number')
    except ValueError:
        messagebox.showwarning("Alert","Field should not be empty")
        messagebox.showinfo("Title", "This is an informational message.")
        messagebox.showerror("Error","This is an error field")
        
added_items = []

def addtotable():
    item_name = item_text.get()
    quantity_name = quantity_text.get()
    price = price_text.get()
    total = total_text.get()
    for item in table.get_children():
        grand_totals=0


        values=table.item(item,"values")
        ind_total=float(values[3])
        grand_totals+=ind_total
        grand_total.config(text=f"Grand Total INR:{grand_totals}")

    table.insert("", tk.END, values=(item_name, quantity_name, price, total))

    if not item_name or not quantity_name or not price or not total:
        messagebox.showwarning("Input Error", "Please fill out all fields.")
        return

    try:
        quantity_value = float(quantity_name)
        price_value = float(price)
        total_value = float(total)
        if quantity_value < 0 or price_value < 0 or total_value < 0:
            raise ValueError
    except ValueError:
        messagebox.showerror("Input Error", "Quantity, Price, and Total must be non-negative numbers.")
        return

    item_text.delete(0, tk.END)
    quantity_text.delete(0, tk.END)
    price_text.delete(0, tk.END)
    total_text.delete(0, tk.END)

    # added_item.append(item_name)
    # feedback_label.config(text=f"added {added_item}")
    added_items.append(item_name)
    feedback_label.config(text=f"Added items: {', '.join(added_items)}")

    
    update_grand_total()





def update_grand_total():
    grand_totals = 0
    for item in table.get_children():
        values = table.item(item, "values")
        try:
            ind_total = float(values[3])
            grand_totals += ind_total
        except ValueError:
            continue
    grand_total.config(text=f"Grand Total: {grand_totals:.2f}")
  
def delete_row():
    selected_item = table.selection()
    if not selected_item:
        feedback_label.config("Error,no item selected")
        return
    for item in selected_item:
        table.delete(item)
    feedback_label.config(text="deleted Selecteditem(s)")
        
            # if selected_item:
    #     table.delete(selected_item)

def populate_entry_fields(event):
    selected_item = table.selection()
    if not selected_item:
        return

    item_values = table.item(selected_item[0], 'values')


    item_text.delete(0, tk.END)
    item_text.insert(0, item_values[0])
    quantity_text.delete(0, tk.END)
    quantity_text.insert(0, item_values[1])
    price_text.delete(0, tk.END)
    price_text.insert(0, item_values[2])
    total_text.delete(0, tk.END)
    total_text.insert(0, item_values[3])

def save_edits():
    selected_item = table.selection()
    if not selected_item:
        messagebox.showwarning("Selection Error", "Please select an item to edit.")
        return

    item_name = item_text.get()
    quantity_name = quantity_text.get()
    price = price_text.get()
    total = total_text.get()


def clear_table():
    for items in table.get_children():
        table.delete(items)

window = tk.Tk()
window.title("Billing System")
window.geometry("600x400")

heading = tk.Label(window, text="Billing System", font="tohomo 20")
heading.pack()
item_details = tk.Frame(window)
item_details.pack()
user_button=tk.Button(window,text="Ask question",font="tohomo 20",command=on_proceed)
user_button.pack()

for col in range(5):  # Adjusted to 5 for the new Delete button
    item_details.columnconfigure(col, minsize=150)

item_label = tk.Label(item_details, text="Item Name", font=("Arial", 15))
item_label.grid(row=0, column=0)
quantity_label = tk.Label(item_details, text="Quantity", font=("Arial", 15))
quantity_label.grid(row=0, column=1)
price_label = tk.Label(item_details, text="Price", font=("Arial", 15))
price_label.grid(row=0, column=2)
total_label = tk.Label(item_details, text="Total", font=("Arial", 15))
total_label.grid(row=0, column=3)


item_text = tk.Entry(item_details, font=("Arial", 15), width=10)
item_text.grid(row=1, column=0)
quantity_text = tk.Entry(item_details, font=("Arial", 15), width=10, justify="right")
quantity_text.grid(row=1, column=1)
price_text = tk.Entry(item_details, font=("Arial", 15), width=10, justify="right")
price_text.grid(row=1, column=2)
total_text = tk.Entry(item_details, font=("Arial", 15), width=10, justify="right")
total_text.grid(row=1, column=3)

calc_btn = tk.Button(item_details, text="Calculate", font=("Arial", 15), bg="blue", fg="white", command=calculate)
calc_btn.grid(row=2, column=2, padx=10, pady=10)
add_total = tk.Button(item_details, text="Add to Total", font=("Arial", 15), bg="blue", fg="white",command=addtotable )
add_total.grid(row=2, column=3, padx=10, pady=10)
delete_btn = tk.Button(item_details, text="Delete", font=("Arial", 15), bg="red", fg="white", command=delete_row)
delete_btn.grid(row=2, column=4, padx=10, pady=10)  # Placed in column 4
clear_btn=tk.Button(item_details,text="ClearItems",font=("Arial",15),bg="purple",fg="white",command=clear_table)
clear_btn.grid(row=2,column=5,padx=10,pady=10)

edit_btn = tk.Button(item_details, text="Edit Selected", font=("Arial", 15), bg="orange", fg="white", command=save_edits)
edit_btn.grid(row=3, column=0, padx=10, pady=10)
war_btn=tk.Button(item_details,text="Warning",font=("Arial",15),bg="purple",fg="white",command=calculate)
table = ttk.Treeview(item_details, columns=('item', 'quantity', 'price', 'total'), show='headings')
table.grid(row=3, column=0, columnspan=5, padx=10, pady=10)  # Adjusted to columnspan=5
table.heading("#1", text="Item Name")
table.heading('#2', text="Quantity")
table.heading('#3', text="Price")
table.heading('#4', text="Total")

table.bind('<<TreeviewSelect>>', populate_entry_fields)



user_label=tk.Label(window,text="",font=("Arial",15))
user_label.pack(pady=20)
grand_total=tk.Label(window,text="Grand Total:",font=('Arial',30),fg="green")
grand_total.pack(padx=10,pady=10)
feedback_label=tk.Label(window,text="",font=("Arial",15))
feedback_label.pack(pady=20)

window.mainloop()
